'''
BlogIndexGenerator
==================

Generate an ``index.html`` file from a template of the same name. This is
useful for blogs and pages for indexing articles, creating the index on the
fly.

:since: 06/05/2014
:author: oblivion
'''
from datetime import datetime
from ssg import generator
from ssg.log import logger
from ssg.settings import SETTINGS


class BlogIndexGenerator(generator.GeneratorBase):
    '''
    Generate an ``index.html`` from a template.
    '''
    def __init__(self):
        '''
        Constructor
        '''
        generator.GeneratorBase.__init__(self)

    def run(self, env, context):
        '''Run the generator.

        :param env: Jinja2 environment.
        :type env: Jinja2 environment
        :param context: The context of the site.
        :type context: ssg.context.Context
        '''
        logger.debug('Running BlogIndexGenerator extension.')
        # Apply post template to all content that has type post, if no template
        # is set.
        for content in context.contents:
            # Check if metadata has 'type'
            if 'type' in content['metadata'].keys():
                # Check if type is 'post'
                if content['metadata']['type'] == 'post':
                    # Check if template is set
                    if 'template' not in content['metadata'].keys():
                        # Set template to 'post'
                        content['metadata']['template'] = 'post'

        # Create meta data for index
        # Create a dictionary for metadata
        metadata = dict()
        metadata['file'] = SETTINGS['CONTENTDIR'] + '/index.html'
        metadata['title'] = 'index'
        metadata['date'] = datetime.now()
        metadata['type'] = 'index'
        metadata['template'] = 'index'
        # Create a contents node for the index
        content = dict()
        # Add meta data
        content['metadata'] = metadata
        # Empty content
        content['content'] = ''
        logger.debug('Autogenerated content: ' + str(content))
        # Add contents to context
        context.contents.append(content)

# Add CategoriMetaParser to list of parsers
generator.GENERATORS.append(BlogIndexGenerator())
