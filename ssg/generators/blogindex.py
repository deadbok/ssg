'''
BlogIndexGenerator
==================

Generate an ``index.html`` file from a template of the same name. This is
useful for blogs and pages for indexing articles, creating the index on the
fly.
**If content is of type 'post' the 'post.html' template is used**, if no
template explicitly set in the meta data of the content.
**Content is sorted by date**
Adds the config key "POSTPERINDEX", to set the number of posts per index page.
:since: 06/05/2014
:author: oblivion
'''
from datetime import datetime
from ssg import generator
from ssg.log import logger
from ssg.settings import SETTINGS


class BlogIndexGenerator(generator.GeneratorBase):
    '''
    Generate an ``index.html`` from a template.
    '''
    def __init__(self):
        '''
        Constructor
        '''
        generator.GeneratorBase.__init__(self)

    def _create_index_metadata(self, page=''):
        '''Create metadata and data structure for the index.

        :param page: If the index spans multiply pages, gives page number.
        :type page: string
        '''
        # Create meta data for index
        # Create a dictionary for metadata
        metadata = dict()
        # Omit page number from first index file
        if page == 1:
            metadata['file'] = SETTINGS['CONTENTDIR'] + '/index.html'
        else:
            metadata['file'] = SETTINGS['CONTENTDIR'] + '/index' + str(page) + '.html'
        metadata['title'] = 'index'
        metadata['date'] = datetime.now()
        metadata['type'] = 'index'
        metadata['template'] = 'index'
        # Create a contents node for the index
        content = dict()
        # Add meta data
        content['metadata'] = metadata
        # Empty content
        content['content'] = ''
        logger.debug('Autogenerated content: ' + str(content))
        # Add contents to context
        return(content)

    def _create_index(self, context, page, n_pages, posts):
        '''Create an index(n).html from a context.

        :param context:
        :type context:
        :param page: Current page number.
        :type page: int
        :param page: Number of index pages.
        :type n_pages: int
        :param posts: List of posts in the index.
        :type posts: list
        '''
        logger.debug('Creating new page.')
        index = self._create_index_metadata(page=page)  # Add local context
        index['context'] = {'context': context,
                            'posts': posts,
                            'content': index}
        index['metadata']['pages'] = n_pages
        page += 1
        context.contents.append(index)
        return index, page

    def _set_template_post(self, context):
        '''Apply post template to all content that has type post, if no
        template is set.
        '''
        for content in context.contents:
        # Check if meta data has 'type'
            if 'type' in content['metadata'].keys():
            # Check if type is 'post'
                if content['metadata']['type'] == 'post':
                # Check if template is set
                    if 'template' not in content['metadata'].keys():
                        # Set template to 'post'
                        content['metadata']['template'] = 'post'

    def run(self, context):
        '''Run the generator.

        :param context: The context of the site.
        :type context: ssg.context.Context
        '''
        logger.debug('Running BlogIndexGenerator extension.')
        content = self._set_template_post(context)
        # Sort by date
        context.contents = sorted(context.contents,
                                  key=lambda c: c['metadata']['date'],
                                  reverse=True)

        # Check if we're supposed to use pagination
        if 'POSTPERINDEX' in SETTINGS.keys():
            logger.debug(str(SETTINGS['POSTPERINDEX']) + ' post per page.')
            # Get number of pages
            n_pages = 0
            for content in context.contents:
                # Only do posts
                if 'type' in content['metadata'].keys():
                    if content['metadata']['type'] == 'post':
                        n_pages += 1
            # TODO: Check for rounding error when result is something like x,1-4
            n_pages = int(n_pages / SETTINGS['POSTPERINDEX'])
            logger.debug('Index spans ' + str(n_pages) + ' pages.')
            # Keep track of the page number
            page = 1
            # Create a list of posts
            posts = list()
            # Run trough all content
            for content in context.contents:
                # Only do posts
                if 'type' in content['metadata'].keys():
                    if content['metadata']['type'] == 'post':
                        # Split by 'POSTSPERINDEX', and create indices
                        if len(posts) <= SETTINGS['POSTPERINDEX']:
                            logger.debug('Adding post to page ' + str(page))
                            posts.append(content)
                        else:
                            index, page = self._create_index(context,
                                                             page,
                                                             n_pages,
                                                             posts)
                            # New posts list
                            posts = list()
            # Get any remaining posts
            if len(posts) > 0:
                logger.debug('Last page is ' + str(len(posts))
                             + 'posts long.')
                index, page = self._create_index(context,
                                                 page,
                                                 n_pages,
                                                 posts)
                context.contents.append(index)
        else:
            logger.debug('No pagination.')
            # Create a list of posts
            posts = list()
            # Run trough all content
            for content in context.contents:
                # Only do posts
                if 'type' in content['metadata'].keys():
                    if content['metadata']['type'] == 'post':
                        logger.debug('Adding post to index page.')
                        posts.append(content)

            index, page = self._create_index(context,
                                               page,
                                               n_pages,
                                               posts)
            context.contents.append(index)


# Add CategoriMetaParser to list of parsers
generator.GENERATORS.append(BlogIndexGenerator())
