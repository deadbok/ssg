'''
CategoryIndexGenerator
======================

Generate an a category page, and indexes for each category. This plug in uses
the meta data tag ``category`` for the category, it expects sub categories
expressed as UNIX paths.


Meta data keywords this plug in depends on
------------------------------------------

category
    A list of categories.


Reserved meta data keywords
---------------------------

catfile
    Name of the category index file.
'''
import os
from datetime import datetime
from ssg import generator
from ssg.log import logger
from ssg.settings import SETTINGS
from ssg.metadata import ishidden


class CategoryIndexGenerator(generator.GeneratorBase):
    '''
    Generate an ``catindex.html`` from a template.
    '''
    def __init__(self):
        '''
        Constructor
        '''
        generator.GeneratorBase.__init__(self)

    def _create_index_metadata(self):
        '''Create metadata and data structure for the index.
        '''
        # Create meta data for index
        # Create a dictionary for metadata
        metadata = dict()
        # Omit page number from first index file
        metadata['src_file'] = ''
        metadata['dst_file'] = os.path.join(SETTINGS['ROOTDIR'],
                                            SETTINGS['OUTPUTDIR'])
        metadata['dst_file'] += '/catindex.html'
        metadata['title'] = 'Category index'
        metadata['date'] = datetime.now()
        metadata['template'] = 'categories'
        # Create a contents node for the index
        content = dict()
        # Add meta data
        content['metadata'] = metadata
        # Empty content
        content['content'] = ''
        logger.debug('Autogenerated content: ' + str(content))
        # Add contents to context
        return(content)

    def _create_category_index(self, context, posts, category):
        '''Create an catindex.html from a context.

        :param context:
        :type context:
        :param posts: List of posts in the index.
        :type posts: list
        '''
        logger.debug('Creating categories page for:' + category)
        index = self._create_index_metadata()
        index['metadata']['dst_file'] = os.path.join(SETTINGS['ROOTDIR'],
                                                     SETTINGS['OUTPUTDIR'])
        index['metadata']['dst_file'] += ('/cat_' + category.replace('/', '-')
                                          + '_index.html')
        index['metadata']['title'] = 'Category index: ' + category
        index['metadata']['template'] = 'category'
        # Add local context
        index['context'] = {'context': context,
                            'posts': posts,
                            'content': index}

        context.contents.append(index)
        return('/cat_' + category.replace('/', '-') + '_index.html')

    def run(self, context):
        '''Run the generator.

        :param context: The context of the site.
        :type context: ssg.context.Context
        '''
        logger.debug('Running CategoryIndexGenerator extension.')

        categories = dict()
        # Run through all content and create a list of cetegories
        for content in context.contents:
            # Only posts that are not  hidden
            if content['metadata']['template'] == 'post':
                if ishidden(content['metadata']):
                    logger.debug('Hiding: ' + content['metadata']['title'])
                else:
                    if 'category' in content['metadata']:
                        # Generate category name
                        category = '/'.join(content['metadata']['category'])
                        # Check if it is already created
                        if category in categories:
                            # Increase post count and add post to the category
                            categories[category]['items'] += 1
                            categories[category]['posts'].append(content)
                        else:
                            # Create a new category and add post
                            logger.debug('Adding: ' + category)
                            categories[category] = dict()
                            categories[category]['items'] = 1
                            categories[category]['posts'] = list()
                            categories[category]['posts'].append(content)
        # Assign index file names to categories.
        for category, data in categories.items():
            categories[category]['filename'] = self._create_category_index(context,
                                               data['posts'],
                                               category)
            logger.debug('Assigning filename to category: ' + categories[category]['filename'])

        # Assign index file names to posts.
        for content in context.contents:
            # Only posts that are not  hidden
            if content['metadata']['template'] == 'post':
                if not ishidden(content['metadata']):
                    logger.debug('Assigning filename to post: ' +
                                 content['metadata']['title'])
                    filename = categories['/'.join(content['metadata']['category'])]['filename']
                    content['metadata']['catfile'] = filename
        logger.debug('Creating category page.')
        index = self._create_index_metadata()
        # Add local context
        category_names = sorted(categories)
        index['context'] = {'context': context,
                            'categories': categories,
                            'category_names': category_names
                            }

        context.contents.append(index)

# Add CategoryIndexGenerator to list of parsers
generator.GENERATORS.append(CategoryIndexGenerator())
