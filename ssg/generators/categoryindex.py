'''
CategoryIndexGenerator
==================

Generate ``index`` files from a template of the same name. This is
useful for blogs and pages for indexing articles, creating the index on the
fly.
Adds a list of post to the Jinja2 context, called "posts".
Adds keys 'page', and 'pages' to the metadata of the indices.
Content is sorted by date.

Adds the config key "POSTPERINDEX", to set the number of posts per index page.

**If content is of type 'post' the 'post.html' template is used**, if no
template explicitly set in the meta data of the content.
'''
import os
from datetime import datetime
from ssg import generator
from ssg.log import logger
from ssg.settings import SETTINGS
from collections import OrderedDict


class CategoryIndexGenerator(generator.GeneratorBase):
    '''
    Generate an ``catindex.html`` from a template.
    '''
    def __init__(self):
        '''
        Constructor
        '''
        generator.GeneratorBase.__init__(self)

    def _create_index_metadata(self):
        '''Create metadata and data structure for the index.
        '''
        # Create meta data for index
        # Create a dictionary for metadata
        metadata = dict()
        # Omit page number from first index file
        metadata['src_file'] = ''
        metadata['dst_file'] = os.path.join(SETTINGS['ROOTDIR'],
                                            SETTINGS['OUTPUTDIR'])
        metadata['dst_file'] += '/catindex.html'
        metadata['title'] = 'Category index'
        metadata['date'] = datetime.now()
        metadata['type'] = 'index'
        metadata['template'] = 'categories'
        # Create a contents node for the index
        content = dict()
        # Add meta data
        content['metadata'] = metadata
        # Empty content
        content['content'] = ''
        logger.debug('Autogenerated content: ' + str(content))
        # Add contents to context
        return(content)

    def _create_category_index(self, context, posts, category):
        '''Create an catindex.html from a context.

        :param context:
        :type context:
        :param posts: List of posts in the index.
        :type posts: list
        '''
        logger.debug('Creating categories page for:' + category)
        index = self._create_index_metadata()
        index['metadata']['dst_file'] = os.path.join(SETTINGS['ROOTDIR'],
                                                     SETTINGS['OUTPUTDIR'])
        index['metadata']['dst_file'] += ('/cat_' + category.replace('/', '-')
                                          + '_index.html')
        index['metadata']['title'] = 'Category index: ' + category
        index['metadata']['template'] = 'category'
        # Add local context
        index['context'] = {'context': context,
                            'posts': posts,
                            'content': index}

        context.contents.append(index)
        return('/cat_' + category.replace('/', '-') + '_index.html')

    def run(self, context):
        '''Run the generator.

        :param context: The context of the site.
        :type context: ssg.context.Context
        '''
        logger.debug('Running CategoryIndexGenerator extension.')

        categories = dict()
        # Run through all content and create a list of cetegories
        for content in context.contents:
            # Skip pages or hidden
            if not content['metadata']['template'] == 'page':
                if 'category' in content['metadata']:
                    category = '/'.join(content['metadata']['category'])
                    if category in categories:
                        categories[category]['items'] += 1
                        categories[category]['posts'].append(content)
                    else:
                        logger.debug('Adding: ' + category)
                        categories[category] = dict()
                        categories[category]['items'] = 1
                        categories[category]['posts'] = list()
                        categories[category]['posts'].append(content)

        for category, data in categories.items():
            categories[category]['filename'] = self._create_category_index(context,
                                                                      data['posts'],
                                                                      category)

        logger.debug('Creating category page.')
        index = self._create_index_metadata()
        # Add local context
        category_names = sorted(categories)
        index['context'] = {'context': context,
                            'categories': categories,
                            'category_names': category_names
                            }

        context.contents.append(index)

# Add CategoryIndexGenerator to list of parsers
generator.GENERATORS.append(CategoryIndexGenerator())
